name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: tuanluongworks
  SERVICE_NAME: trading-system
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake libssl-dev
    
    - name: Build project
      run: |
        mkdir build
        cd build
        cmake ..
        make -j$(nproc)
    
    - name: Run tests
      run: |
        cd build
        # Add test commands here when available
        # ctest --output-on-failure

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Verify GitHub Secrets
      run: |
        if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
          echo "❌ GCP_SA_KEY secret is not set"
          echo "Please add the service account key to GitHub Secrets"
          echo "Run setup-github-auth.bat to create the service account and get the key"
          exit 1
        else
          echo "✅ GCP_SA_KEY secret is configured"
        fi

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
        project_id: ${{ env.PROJECT_ID }}
        export_environment_variables: true
        create_credentials_file: true

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Verify GCP Authentication
      run: |
        echo "Testing GCP authentication..."
        gcloud auth list
        gcloud config list project
        echo "✅ GCP authentication verified"

    - name: Configure Docker
      run: gcloud auth configure-docker

    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
        echo "✅ Docker image built successfully"

    - name: Push Docker image
      run: |
        echo "Pushing Docker image to GCR..."
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
        echo "✅ Docker image pushed successfully"

    - name: Deploy to Cloud Run
      run: |
        echo "Deploying to Cloud Run..."
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --concurrency 100 \
          --max-instances 10 \
          --min-instances 0 \
          --port 8080 \
          --set-env-vars "PORT=8080,CONFIG_FILE=config/production.ini" \
          --project $PROJECT_ID
        echo "✅ Deployment to Cloud Run completed"

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)' --project=$PROJECT_ID)
        echo "Service deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Test deployment
      run: |
        echo "Testing deployment..."
        sleep 30  # Wait for service to be ready
        curl -f $SERVICE_URL/health || exit 1
        echo "✅ Health check passed!"
        echo "🎉 Deployment successful! Service is running at: $SERVICE_URL"
